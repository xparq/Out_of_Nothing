#:
#! NOTE: The MAKE process must be run in the project (root) dir,
#!       because everything is assumed to be relative to that!
#!	 (BB's pdpmake doesn't support abs. paths for targets! :-o )
#!

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!! Only gcc for now:
TOOLCHAIN = mingw
#!! Override the MSVC-only setup script:
SFML_ROOT := extern/sfml/$(TOOLCHAIN)
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#--- BUILD MODE DEFAULTS -----------------------------------------------------
DEBUG = 0
CRT = dll
#	CRT=dll is always the case with the pre-built SFML libs, so not use changing it!
SFML = static

#!! Integrate these:
CFLAGS_ = -DBACKEND=SFML
#CFLAGS_ = -DGFX_BACKEND=... -DINPUTS_BACKEND=... -DAUDIO_BACKEND=... -DSYSTEM_BACKEND=...
# -DDISABLE_HUD
# -DDISABLE_THREADS

#--- PRJ DEFINITIONS ---------------------------------------------------------
SZ_APP_NAME ?= test
SZ_APP_NAME := $(SZ_APP_NAME)-gcc
SZ_PRJ_DIR  ?= .
SZ_SRC_SUBDIR ?= src
SZ_OUT_SUBDIR ?= build.out
#!! Can't be empty, for error-prone $(...DIR)/... concats (yet)!
SZ_RUN_SUBDIR ?= .

exe = $(exedir)/$(SZ_APP_NAME)$(buildmode_file_tag).exe

outdir = $(SZ_OUT_SUBDIR)
#!!objdir = $(vroot)/obj
#!!Alas...:
objdir = $(vroot)/$(SZ_SRC_SUBDIR)
#!!ifcdir = $(vroot)/ifc
#!!Alas...:
ifcdir = $(vroot)/$(SZ_SRC_SUBDIR)
exedir = $(SZ_RUN_SUBDIR)
testdir = $(SZ_TEST_SUBDIR)

#!! Kludge until I find out the correct way to support C++ modules...
#!!Use != ls -b or something *.ifc!
#!!CPP_MODULE_IFCS = $(ifcdir)/*.ifc
#!!
#!!!! Anyway, my GCC 13.2 segfaults with modules (`-modules-tc`)!... :-o 
#!!!!CPP_MODULE_IFCS = $(ifcdir)/Storage.ifc
#!!
#!! Also, any module change will trigger full rebuild, coz no sane way
#!! to auto-track actual deps yet (even less than headers)! :-/
#!! (E.g. https://stackoverflow.com/questions/69190433/auto-generate-dependencies-for-modules,
#!! https://github.com/premake/premake-core/issues/1735)
#!! So, well, sigh... (or add a manaully updated list...):
objs_using_modules = $(objs)

#!!EXT_LIB_SFW = extern/sfw/lib/msvc/sfw$(cflags_crt_linkmode_with_debug)$(buildmode_sfml_linkmode_lib_tag).lib
EXT_LIB_SFW = extern/sfw/lib/mingw/libsfw$(buildmode_sfml_linkmode_lib_tag).a 
EXT_LIB_ZSTD = extern/zstd/mingw/libzstd.a
#!!! ALERT !!! For gcc, order matters! And it must be this counterintuitive one: SFW *before* SFML! :-o
EXT_LIBS =\
	$(EXT_LIB_SFW) \
	$(sfml_and_deps_libs) \
	$(EXT_LIB_ZSTD) \
	-lopengl32 -lwinmm -lgdi32 -luser32\
	-lws2_32 -ldbghelp\
# NOTE: The last two above for Tracy!

# (Comments must be last...:)
#	extern/toml++/toml$(cflags_crt_linkmode).lib \
#	user32.lib <- only needed with SFML=dll, strangely! -o

# Adapt the various flavors of the SFML libs (as per the debug/link modes)...
SFML_linkmode=$(SFML)

_sflibdir=$(SFML_ROOT)/lib
#!!_sfml_libs__static = libsfml-graphics-s.a libsfml-window-s.a libsfml-system-s.a libsfml-audio-s.a
_sfml_libs__static = -static -lsfml-main-s -lsfml-graphics-s -lsfml-window-s -lsfml-system-s -lsfml-audio-s \
	extern/sfml/mingw/lib/libsfml-main-s.a \
	extern/sfml/mingw/lib/libsfml-graphics-s.a \
	extern/sfml/mingw/lib/libsfml-window-s.a \
	extern/sfml/mingw/lib/libsfml-system-s.a \
	extern/sfml/mingw/lib/libsfml-audio-s.a
_sfml_libs__dll    =                       -lsfml-graphics   -lsfml-window   -lsfml-system   -lsfml-audio
sfml_libs = $(_sfml_libs__$(SFML_linkmode))

_sfml_and_deps_libs__static = $(sfml_libs) -static -lfreetype -logg -lvorbis -lvorbisenc -lvorbisfile -lflac \
	extern/sfml/mingw/lib/libfreetype.a \
	extern/sfml/mingw/lib/libogg.a \
	extern/sfml/mingw/lib/libvorbis.a \
	extern/sfml/mingw/lib/libvorbisenc.a \
	extern/sfml/mingw/lib/libvorbisfile.a \
	extern/sfml/mingw/lib/libflac.a
#!!??	user32.lib kernel32.lib gdi32.lib winmm.lib advapi32.lib

_sfml_and_deps_libs__dll = $(sfml_libs) #!!?? -gl -lfreetype -logg -lvorbis -lvorbisenc -lvorbisfile -lflac
sfml_and_deps_libs = $(_sfml_and_deps_libs__$(SFML_linkmode))
#debug:; @echo sfml_and_deps_libs: $(sfml_and_deps_libs)

#----------------------------
# Static/DLL CRT link mode
#------
# Keep these -... not /... because they're used for (lib) file tagging, too! :)

#_cflags_crt_linkmode__static :=
#_cflags_crt_linkmode__dll    :=
#cflags_crt_linkmode := $(_cflags_crt_linkmode__$(CRT))
#
#_cflags_crt_linkmode_with_debug__0 = $(cflags_crt_linkmode)
#_cflags_crt_linkmode_with_debug__1 = $(cflags_crt_linkmode)d
cflags_crt_linkmode_with_debug = $(_cflags_crt_linkmode_with_debug__$(DEBUG))

#----------------------
# DEBUG/RELEASE mode
#------
_cflags_debug__0 = -DNDEBUG -O2
_cflags_debug__1 = -DDEBUG -g
#	The -O...s above are borrowed from Dr. Memory's README/Quick start.
#	-ZI enables edit-and-continue (but it only exists for Intel CPUs!).
cflags_debug = $(_cflags_debug__$(DEBUG))

_linkflags_debug__0 =
_linkflags_debug__1 =
linkflags_debug = $(_linkflags_debug__$(DEBUG))

#------------------------------
# SFML link mode (static/dll)
#------
_cflags_sfml_linkmode__static = -DSFML_STATIC
cflags_sfml_linkmode = $(_cflags_sfml_linkmode__$(SFML))


# Output dir/file tags for build alternatives
# NOTE: Must differ from their "no ..." counterparts to avoid code (linking) mismatches!
# Also: CRT=dll is always the case with the pre-built SFML libs, so no use changing it...
##!!
##!! Instead of the horror of having 3 sets of these macros (a generic tag,
##!! a dir tag, a file tag -- where each must separately dispatch on their
##!! parameter!), use a uniform format suitable for each purpose (as a suffix):
##!!
_buildmode_debug_tag__0 =
_buildmode_debug_tag__1 = .d
buildmode_debug_tag     = $(_buildmode_debug_tag__$(DEBUG))
_buildmode_crtdll_tag__static =
_buildmode_crtdll_tag__dll    = .crtdll
buildmode_crtdll_tag          = $(_buildmode_crtdll_tag__$(CRT))
_buildmode_sfml_linkmode_tag__static =
_buildmode_sfml_linkmode_tag__dll    = .SFMLdll
buildmode_sfml_linkmode_tag          = $(_buildmode_sfml_linkmode_tag__$(SFML_linkmode))

# All combined:
buildmode_dir_tag  = $(buildmode_crtdll_tag)$(buildmode_sfml_linkmode_tag)$(buildmode_debug_tag)
buildmode_file_tag = $(buildmode_crtdll_tag)$(buildmode_sfml_linkmode_tag)$(buildmode_debug_tag)
#debug:; @echo buildmode_dir_tag: $(buildmode_dir_tag)
#debug:; @echo buildmode_file_tag: $(buildmode_file_tag)

# Lib suffix tag for SFML link mode:
_buildmode_sfml_linkmode_lib_tag__static = -s
_buildmode_sfml_linkmode_lib_tag__dll    =
buildmode_sfml_linkmode_lib_tag = $(_buildmode_sfml_linkmode_lib_tag__$(SFML))

_sfml_lib_debug_suffix__0 =
_sfml_lib_debug_suffix__1 = -d
sfml_lib_debug_suffix     = $(_sfml_lib_debug_suffix__$(DEBUG))
# Mind the mandatory := here, to avoid macro recursion:
sfml_libs := $(sfml_libs:%.lib=%$(sfml_lib_debug_suffix).lib)
#debug:; @echo sfml_libs: $(sfml_libs)

#--- CUSTOMIZATIONS ----------------------------------------------------------
CC   := g++
CXX  := $(CC)
LINK := $(CC)
SH   := busybox sh


# The optional `...FLAGS_` macros can be passed via the cmdline for overriding!
# Not using += because we're prepending, to support overriding (e.g. from the CMDLINE)!
#! Kludge: avoid recursive assignment, while still allowing deferred expansion!
CFLAGS   = -c $(cflags_crt_linkmode_with_debug) $(cflags_debug)
# C[PLUS]_INCLUDE_PATH is expected to have been setup already!
# Add a -I also for including the commit hash file:
CFLAGS  += -I$(objdir) -I$(outdir)
# Add a -I also for 'extern' (perhaps redundantly, as the env should have it, but it's so generic):
CFLAGS  += -Iextern
CFLAGS  += -Wall
# -pedantic -Wall -Wextra -Wshadow -Wwrite-strings
CFLAGS  += -MMD
CFLAGS  += $(CFLAGS_)
CPPFLAGS   = $(CFLAGS) -std=c++23 # -fmodules-ts
#			 /ifcOutput $(ifcdir)/ /ifcSearchDir $(ifcdir)/
CPPFLAGS  += $(cflags_sfml_linkmode)
CPPFLAGS  += $(CPPFLAGS_)
LINKFLAGS   = $(linkflags_debug)
LINKFLAGS  += $(linkflags_debug) $(LINKFLAGS_)
LINKFLAGS_ := -static -L$(SFML_ROOT)/lib


#-----------------------------------------------------------------------------
# BUILD "ENGINE"
#-----------------------------------------------------------------------------

# Preparations...
toolchain_dir_tag = .$(TOOLCHAIN)

# This is the build-mode-specific (and accordingly tagged) "VPATH" root:
vroot = $(SZ_OUT_SUBDIR)/v$(toolchain_dir_tag)$(buildmode_dir_tag)
vroot_bs = $(SZ_OUT_SUBDIR)/v$(buildmode_dir_tag)
#dump:;@echo $(vroot)

src_subdir=$(SZ_SRC_SUBDIR)
SOURCES != busybox sh -c "find $(src_subdir) -name '*.c' -o -name '*.cpp'"
#!!Not yet: -o -name '*.ixx'" # GCC segfaults on modules! :-/ 

#!!?? Couldn't get the BB `find` syntax right without the `sh -c` kludge! :-/
SOURCES := $(SOURCES:$(src_subdir)/%=%)
#test:: ; @echo SOURCES: $(SOURCES)

# Generated per-obj header auto-dep. includes are collected here:
hdep_makinc_file = $(vroot)/hdeps.mak

# No need for such pattern shenanigans, as the current dir (./) has
# been appended by `find`
#!!_src_prep := FPFX_PLACEHOLDER_$(SOURCES:%.c=FPFX_PLACEHOLDER_%.c)
objs := $(SOURCES:%=$(objdir)/%)
#dump:; @echo objs: $(objs)
objs := $(objs:%.c=%.o)
objs := $(objs:%.cpp=%.o)
objs := $(objs:%.ixx=%.o)
#dump:; @echo objs: $(objs)
#!! No idea how this would translate to 2-file module sources though:
#!! CPP_MODULE_IFCS already has $(ifcdir), which is currently identical to $(objdir), so...
objs_of_modules = $(CPP_MODULE_IFCS:%.ifc=%.o)
#dump:; @echo objs_of_modules: $(objs_of_modules)

#-----------------------------------------------------------------------------
# List the phonies so `make -t` won't create empty files for them:
.PHONY: build info mk_outdirs collect_sources cpp_modules smoke_test

build: info .WAIT mk_outdirs .WAIT collect_sources .WAIT cpp_modules .WAIT $(exe) .WAIT smoke_test
	@echo "Main target ready: $(exe)"
info:
	@echo "Build mode: DEBUG=$(DEBUG), CRT=$(CRT), SFML=$(SFML)"

_mkdir = test -d $@ || mkdir $@
mk_outdirs: $(outdir) $(vroot) $(objdir) $(ifcdir) $(exedir); @#
# Double colons in order to not fail on possibly identical dirs:
$(outdir)::; @$(_mkdir)
$(vroot)::;  @$(_mkdir)
$(objdir)::; @$(_mkdir)
$(ifcdir)::; @$(_mkdir)
$(exedir)::; @$(_mkdir)

collect_sources:
	@echo Syncing the build cache...
#	This (cp -u) only copies newer files (confirmed with -uia):
	@cp -ufa '$(src_subdir)' '$(vroot)'
#	As cp can only add and overwrite but not delete existing files,
#	the cached tree must be deleted from time to time to remove cruft!
	@touch "$(vroot)/.cached_src_age"
	@_cached_src_age=$$((`cat "$(vroot)/.cached_src_age"`)) &&\
		if [ "$$_cached_src_age" != "10" ]; then\
			echo "$$((_cached_src_age + 1))"> "$(vroot)/.cached_src_age";\
		else\
			echo "[!!NOT IMPLEMENTED YET!!] Src cache too old, deleting...";\
			echo 0> "$(vroot)/.cached_src_age";\
		fi
#!! mv can't merge into non-empty dirs with same name, so the 2nd runs failed:
#!! Resorting to keeping the entire src subtree under objdir...
#	mv $(objdir)/$(srcdir)/* -t $(objdir)
#	rmdir $(objdir)/$(srcdir)
#!! This (just like -t) would NOT preserve the src subdirs!
#	cp -u $(SOURCES) $(objdir)/
#	cp -u $(HEADERS) $(objdir)/
	@echo -n "" > $(hdep_makinc_file)
	@for o in $(objs:%.o=%.d); do echo "-include $$o" >> "$(hdep_makinc_file)"; done

cpp_modules:: $(CPP_MODULE_IFCS) $(objs_of_modules)
	@echo "C++ modules up-to-date."

# (Sigh... See the issue at the def. of objs_using_modules!)
#!!?? Is adding $(objs_of_modules) actually necessary?
#!!??$(objs_using_modules) $(objs_of_modules): $(CPP_MODULE_IFCS)
$(objs_using_modules): $(CPP_MODULE_IFCS)

# Strip the ugly paths from each object
#!! Alas, can't be done without my path-inference hack to pdpmake:
#!!$(exe): $(objs:$(objdir)/%=%)
#!!	@echo LINK $?
#!!	$(LINK) $(LINKFLAGS) /libpath:$(objdir) $(objs) $(EXT_LIBS) /out:$@
$(exe): $(objs) $(EXT_LIB_SFW) $(EXT_LIB_ZSTD)
	$(LINK) $(LINKFLAGS) $(objs) $(EXT_LIBS) -o $@


smoke_test:
	if [ -z "${GITHUB_ACTION}" ]; then $(testdir)/regression/tc-smoke `basename $(exe)`; fi


#-----------------------------------------------------------------------------
# Inference rules...
#-----------------------------------------------------------------------------
.SUFFIXES: .c .cpp .ixx

_cc_info = @echo Compiling $(<:$(vroot)/%=%)...
_cc_out  = $(outdir)/.tool-output.tmp
_cc_exitcode = $(outdir)/.tool-exitcode.tmp
#_cc_depgen = ...

.c.o:
	$(_cc_info)
	@$(CC) $(CFLAGS) -o$@ $< $(_cc_depgen)

.cpp.o:
	$(_cc_info)
	@$(CXX) $(CPPFLAGS) -o$@ $< $(_cc_depgen)

.ixx.ifc:
	$(_cc_info)
	@$(CXX) $(CPPFLAGS) -x c++-system-header iostream -x c++ -o$@ $< $(_cc_depgen)

.ixx.o:
	$(_cc_info)
	@$(CXX) $(CPPFLAGS) -x c++-system-header iostream -x c++ -o$@ $< $(_cc_depgen)

#-----------------------------------------------------------------------------
# Custom rules...
#-----------------------------------------------------------------------------
ifdef COMMIT_HASH_INCLUDE_FILE
# BB's pdpmake doesn't support abs. paths for targets! :-/
COMMIT_HASH_INCLUDE_FILE != basename $(COMMIT_HASH_INCLUDE_FILE)
COMMIT_HASH_INCLUDE_FILE := $(outdir)/$(COMMIT_HASH_INCLUDE_FILE)
#debug:; @echo "COMMIT_HASH_INCLUDE_FILE: $(COMMIT_HASH_INCLUDE_FILE)"
$(COMMIT_HASH_INCLUDE_FILE): .git/logs/HEAD
#	Using sh's echo explicitly, as this block calls an .sh script anyway:
	@echo "Make the last commit ID available for #including..."
	@$(SH) "tooling/git/_create_commit_hash_include_file.sh"
	@echo

#! If pdmake fails with with "dunno how to make that c:/... commit hash file"
#! that means it sees the path in a .dep file, but can't match it with the
#! cooked non-absolute path here (and we can't use the abs path here, because
#! it just won't accept it as a target... :-/ ). To solve this, just delete
#! the dependency file, or create that hash.inc file e.g. by one of the other
#! (less handicapped) build procedures before using this makefile!
$(objdir)/app/main.o: $(COMMIT_HASH_INCLUDE_FILE)
else
#!! No talking in BB's pdmake... :-/
#!! message -ERROR: OON_HASH_INCLUDE_FILE not defined. Env setup was not run?
endif

# Include autodeps if present
-include $(hdep_makinc_file)
